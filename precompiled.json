{
  "0x01": {
    "name": "ecRecover",
    "input": "hash | v | r | s",
    "output": "publicAddress",
    "description": "Elliptic curve digital signature algorithm (ECDSA) public key recovery function"
  },
  "0x02": {
    "name": "SHA2-256",
    "input": "data",
    "output": "hash",
    "description": "Hash function",
    "dynamicFee": {
      "homestead": {
        "inputs": {
          "size": {
            "type": "number",
            "label": "Byte size of data"
          }
        }
      }
    }
  },
  "0x03": {
    "name": "RIPEMD-160",
    "input": "data",
    "output": "hash",
    "description": "Hash function",
    "dynamicFee": {
      "homestead": {
        "inputs": {
          "size": {
            "type": "number",
            "label": "Byte size of data"
          }
        }
      }
    }
  },
  "0x04": {
    "name": "identity",
    "input": "data",
    "output": "data",
    "description": "Returns the input",
    "dynamicFee": {
      "homestead": {
        "inputs": {
          "size": {
            "type": "number",
            "label": "Byte size of data"
          }
        }
      }
    }
  },
  "0x05": {
    "name": "modexp",
    "input": "Bsize | Esize | Msize | B | E | M",
    "output": "value",
    "description": "Arbitrary-precision exponentiation under modulo",
    "dynamicFee": {
      "byzantium": {
        "inputs": {
          "Bsize": {
            "type": "number",
            "label": "Input: Bsize"
          },
          "Msize": {
            "type": "number",
            "label": "Input: Msize"
          },
          "exponent": {
            "type": "number",
            "label": "Input: E"
          }
        }
      }
    }
  },
  "0x06": {
    "name": "ecAdd",
    "input": "x1 | y1 | x2 | y2",
    "output": "x | y",
    "description": "Point addition (ADD) on the elliptic curve 'alt_bn128'",
    "dynamicFee": {
      "byzantium": {
        "inputs": {
          "invalid": {
            "type": "boolean",
            "label": "Is the input invalid?"
          },
          "remaining": {
            "type": "number",
            "label": "State: remaining gas in the current context"
          }
        }
      }
    }
  },
  "0x07": {
    "name": "ecMul",
    "input": "x1 | y1 | s",
    "output": "x | y",
    "description": "Scalar multiplication (MUL) on the elliptic curve 'alt_bn128'",
    "dynamicFee": {
      "byzantium": {
        "inputs": {
          "invalid": {
            "type": "boolean",
            "label": "Is the input invalid?"
          },
          "remaining": {
            "type": "number",
            "label": "State: remaining gas in the current context"
          }
        }
      }
    }
  },
  "0x08": {
    "name": "ecPairing",
    "input": "x1 | y1 | x2 | y2 | ... | xk | yk",
    "output": "success",
    "description": "Bilinear function on groups on the elliptic curve 'alt_bn128'",
    "dynamicFee": {
      "homestead": {
        "inputs": {
          "size": {
            "type": "number",
            "label": "Byte size of data"
          }
        }
      }
    }
  },
  "0x09": {
    "name": "blake2f",
    "input": "rounds | h | m | t | f",
    "output": "h",
    "description": "Compression function F used in the BLAKE2 cryptographic hashing algorithm",
    "dynamicFee": {
      "homestead": {
        "inputs": {
          "rounds": {
            "type": "number",
            "label": "Input: rounds"
          }
        }
      }
    }
  },
  "0x0a": {
    "name": "point evaluation",
    "input": "bytes",
    "output": "bytes",
    "description": "Verify p(z) = y given commitment that corresponds to the polynomial p(x) and a KZG proof. Also verify that the provided commitment matches the provided versioned_hash."
  },
  "0x0b": {
    "name": "BLS12_G1ADD",
    "input": "x1 | y1 | x2 | y2",
    "output": "x | y",
    "description": "BLS12-381 G1 point addition"
  },
  "0x0c": {
    "name": "BLS12_G1MSM",
    "input": "k1 | x1 | y1 | k2 | x2 | y2 | ...",
    "output": "x | y",
    "description": "BLS12-381 G1 multi-scalar multiplication",
    "dynamicFee": {
      "prague": {
        "inputs": {
          "size": {
            "type": "number",
            "label": "Byte size of data"
          }
        }
      }
    }
  },
  "0x0d": {
    "name": "BLS12_G2ADD",
    "input": "x1_c0 | x1_c1 | y1_c0 | y1_c1 | x2_c0 | x2_c1 | y2_c0 | y2_c1",
    "output": "x_c0 | x_c1 | y_c0 | y_c1",
    "description": "BLS12-381 G2 point addition"
  },
  "0x0e": {
    "name": "BLS12_G2MSM",
    "input": "k1 | x1_c0 | x1_c1 | y1_c0 | y1_c1 | k2 | x2_c0 | x2_c1 | y2_c0 | y2_c1 | ...",
    "output": "x_c0 | x_c1 | y_c0 | y_c1",
    "description": "BLS12-381 G2 multi-scalar multiplication",
    "dynamicFee": {
      "prague": {
        "inputs": {
          "size": {
            "type": "number",
            "label": "Byte size of data"
          }
        }
      }
    }
  },
  "0x0f": {
    "name": "BLS12_PAIRING_CHECK",
    "input": "g1_x | g1_y | g2_x_c0 | g2_x_c1 | g2_y_c0 | g2_y_c1 | ...",
    "output": "result",
    "description": "BLS12-381 pairing check",
    "dynamicFee": {
      "prague": {
        "inputs": {
          "size": {
            "type": "number",
            "label": "Byte size of data"
          }
        }
      }
    }
  },
  "0x10": {
    "name": "BLS12_MAP_FP_TO_G1",
    "input": "field_element",
    "output": "x | y",
    "description": "BLS12-381 map field element to G1 point"
  },
  "0x11": {
    "name": "BLS12_MAP_FP2_TO_G2",
    "input": "field_element_c0 | field_element_c1",
    "output": "x_c0 | x_c1 | y_c0 | y_c1",
    "description": "BLS12-381 map field extension element to G2 point"
  }
}
